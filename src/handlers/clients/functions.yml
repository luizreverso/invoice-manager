createClient:
  handler: src/handlers/clients/create.handler
  events:
    - http:
        path: /clients
        method: post
        authorizer:
          name: auth
          type: token
          identitySource: method.request.header.Authorization
        documentation:
          summary: "Create a new client"
          description: "Registers a new client with the given details."
          headerParams:
            - name: "Authorization"
              required: true
              description: "Bearer token for user authentication."
              schema:
                type: string
          requestBody:
            description: "Client data to be added"
            required: true
          requestModels:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: "Full name of the client."
                  email:
                    type: string
                    description: "Email address of the client."
                  address:
                    type: string
                    description: "Physical address of the client."
                  phone:
                    type: string
                    description: "Contact phone number of the client."
          methodResponses:
            - statusCode: 200
              responseBody:
                description: "Client successfully created."
              responseModels:
                application/json: "EmptyResponse"
            - statusCode: 500
              responseBody:
                description: "Invalid input."
              responseModels:
                application/json: "EmptyResponse"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":table/"
            - Ref: InvoiceManagerTable
editClient:
  handler: src/handlers/clients/edit.handler
  events:
    - http:
        path: /clients/{clientId}
        method: put
        authorizer:
          name: auth
          type: token
          identitySource: method.request.header.Authorization
        documentation:
          summary: "Update client details"
          description: "Edit details of an existing client using their ID."
          pathParams:
            - name: "clientId"
              required: true
              description: "ID of the client to be edited."
              schema:
                type: string
          headerParams:
            - name: "Authorization"
              required: true
              description: "Bearer token for user authentication."
              schema:
                type: string
          requestBody:
            description: "Updated client data"
            required: true
          requestModels:
            application/json: "Client"
          methodResponses:
            - statusCode: 200
              responseBody:
                description: "Client successfully edited."
              responseModels:
                application/json: "Client"
            - statusCode: 400
              responseBody:
                description: "Bad Request. Invalid input or missing required fields."
              responseModels:
                application/json: "EmptyResponse"
            - statusCode: 404
              responseBody:
                description: "Client not found."
              responseModels:
                application/json: "EmptyResponse"
            - statusCode: 500
              responseBody:
                description: "Internal server error."
              responseModels:
                application/json: "EmptyResponse"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":table/"
            - Ref: InvoiceManagerTable
deleteClient:
  handler: src/handlers/clients/delete.handler
  events:
    - http:
        path: /clients/{clientId}
        method: delete
        authorizer:
          name: auth
          type: token
          identitySource: method.request.header.Authorization
        documentation:
          summary: "Delete a client"
          description: "Removes a client using their unique ID."
          pathParams:
            - name: "clientId"
              required: true
              description: "The ID of the client to delete."
              schema:
                type: string
          headerParams:
            - name: "Authorization"
              required: true
              description: "Bearer token for user authentication."
              schema:
                type: string
          methodResponses:
            - statusCode: 200
              responseBody:
                description: "Client successfully deleted."
              responseModels:
                application/json: "EmptyResponse"
            - statusCode: 404
              responseBody:
                description: "Client not found."
              responseModels:
                application/json: "EmptyResponse"
            - statusCode: 500
              responseBody:
                description: "Internal server error."
              responseModels:
                application/json: "EmptyResponse"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:DeleteItem"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":table/"
            - Ref: InvoiceManagerTable
getClient:
  handler: src/handlers/clients/get.handler
  events:
    - http:
        path: /clients/{clientId}
        method: get
        authorizer:
          name: auth
          type: token
          identitySource: method.request.header.Authorization
        documentation:
          summary: "Retrieve client details"
          description: "Fetch details of a specific client using their ID."
          pathParams:
            - name: "clientId"
              required: true
              description: "The ID of the client to retrieve."
              schema:
                type: string
          headerParams:
            - name: "Authorization"
              required: true
              description: "Bearer token for user authentication."
              schema:
                type: string
          methodResponses:
            - statusCode: 200
              responseBody:
                description: "Successful retrieval of client details."
              responseModels:
                application/json: "Client"
            - statusCode: 404
              responseBody:
                description: "Client not found."
              responseModels:
                application/json: "EmptyResponse"
            - statusCode: 500
              responseBody:
                description: "Internal server error."
              responseModels:
                application/json: "EmptyResponse"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":table/"
            - Ref: InvoiceManagerTable
listClient:
  handler: src/handlers/clients/list.handler
  events:
    - http:
        path: /clients
        method: get
        authorizer:
          name: auth
          type: token
          identitySource: method.request.header.Authorization
        documentation:
          summary: "List all clients"
          description: "Fetch a list of all registered clients."
          headerParams:
            - name: "Authorization"
              required: true
              description: "Bearer token for user authentication."
              schema:
                type: string
          methodResponses:
            - statusCode: 200
              responseBody:
                description: "Successful retrieval of client list."
              responseModels:
                application/json:
                  schema:
                    type: array
                    items:
                      type: object
                      properties:
                        clientId:
                          type: string
                          description: "Unique ID of the client."
                        name:
                          type: string
                          description: "Name of the client."
                        email:
                          type: string
                          description: "Email address of the client."
                        address:
                          type: string
                          description: "Physical address of the client."
                        phone:
                          type: string
                          description: "Contact phone number of the client."
            - statusCode: 500
              responseBody:
                description: "Internal server error."
              responseModels:
                application/json: "EmptyResponse"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":table/"
            - Ref: InvoiceManagerTable
